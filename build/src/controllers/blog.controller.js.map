{"version":3,"file":"blog.controller.js","names":["Blog","commentSchema","cloudinary","dotenv","config","v2","cloud_name","api_key","api_secret","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","createBlog","req","res","console","log","body","title","blog","postedDate","imageUrl","files","image","imageUpload","url","save","then","result","json","status","send","ok","catch","error","err","getAllBlogs","blogs","find","success","data","message","getBlogById","findById","_id","params","id","number","length","deleteBlog","deleteOne","updateSingleBlog","findOne","file","path","uploader","upload","folder","public_id","addComment","comments","comment","user","getAllComments","populate","model","select","like","statusCode","alreadyLiked","likes","toString","filter","push","blogId","likesCounting"],"sources":["../../../src/controllers/blog.controller.js"],"sourcesContent":["import Blog from \"../models/Blogs.model.js\";\r\nimport  { commentSchema } from \"../models/commentmod.js\";\r\n// import blogImage from \"../helpers/imageUpload.js\";\r\n\r\n\r\nimport cloudinary  from 'cloudinary';\r\nimport   dotenv  from \"dotenv\"\r\n\r\ndotenv.config()\r\n// import uploader from '../config/cloudinary';\r\ncloudinary.v2;\r\n// const CLOUD_NAME = ;\r\n// const API_KEY = ;\r\n// const API_SECRET= ;\r\ncloudinary.config({\r\n        cloud_name:\"process.env.CLOUD_NAME\",\r\n        api_key: \"process.env.API_KEY\",\r\n        api_secret: \"process.env.API_SECRET\",\r\n      });\r\n      var today = new Date()\r\n      var dd = String(today.getDate()).padStart(2, \"0\");\r\n      var mm = String(today.getMonth() +1).padStart(2, \"0\");\r\n      var yyyy = today.getFullYear();\r\n      today= dd+ \"/\" + mm + \"/\" + yyyy;\r\n\r\nexport const createBlog = async function(req, res){\r\n  /* istanbul ignore next*/\r\n    console.log(\"AASASASASA\", req.body)\r\n    try {\r\n      const {title, body}=req.body\r\n        console.log(title, body)\r\n        // const validationResult = await blogSchema.validateAsync(req.body);\r\n        // if(req.files) {\r\n            \r\n        //     const image = await cloudinary.uploader.upload(req.file.path);\r\n        //     }\r\n               const blog= await new Blog({\r\n                title:title,\r\n                body:body,\r\n                postedDate: today,\r\n                imageUrl: '',\r\n                })\r\n                /* istanbul ignore next*/\r\n                if(req.files) {\r\n                  const image = await imageUpload(req);\r\n                  blog.imageUrl = image.url\r\n                  }\r\n             \r\n            blog.save()\r\n           /* istanbul ignore next*/\r\n            .then(result=>{\r\n                console.log(result);\r\n                res.json(result)\r\n                res.status(201).send({ok:'add  successfully'});\r\n            })\r\n            .catch(error=>console.log(error))\r\n\r\n    \r\n    }\r\n    catch (err) {\r\n     /* istanbul ignore next*/\r\n        res.status(500).json(err)\r\n        console.log(err)\r\n    }\r\n\r\n};\r\n// export const getAllBlogs = async(req,res) =>{\r\n//     const blogs = await Blog.find();\r\n//     res.send(blogs);\r\n//   }\r\n\r\n\r\n  // export const getAllBlogs = async (req, res) => {\r\n  //   try {\r\n  //   const blogs = await Blog.find();\r\n  //   return res.status(200).json({\r\n  //   status: \"success\",\r\n  //   number: blogs.length,\r\n  //   blogs,\r\n  //   });\r\n  //   } catch (error) {\r\n  //   return res.status(500).json({\r\n  //   status: \"failed\",\r\n  //   error: error.message,\r\n  //   });\r\n  //   }\r\n  //   };\r\n    export const getAllBlogs = async (req, res) => {\r\n     \r\n      try {\r\n        const blogs = await Blog.find();\r\n        res.json({ status: 200, success: true, data: blogs });\r\n      } catch (error) {\r\n       /* istanbul ignore next*/\r\n        return res.status(404).json({\r\n          status: \"failed\",\r\n          error: error.message,\r\n        });\r\n      }\r\n    };\r\n    \r\n\r\n\r\n  // export const getBlogById = async(req,res) =>{\r\n  //   const blogs = await Blog.findById({_id: req.params.id});\r\n  //   res.send(blogs);\r\n  // }\r\n\r\n\r\n  export const getBlogById = async (req, res) => {\r\n    try {\r\n    const blogs = await Blog.findById({_id: req.params.id});\r\n    return res.status(200).json({\r\n    status: \"success\",\r\n    number: blogs.length,\r\n    blogs,\r\n    });\r\n    } catch (error) {\r\n      /* istanbul ignore next*/\r\n    return res.status(404).json({\r\n    status: \"failed\",\r\n    error: error.message,\r\n    });\r\n    }\r\n    };\r\n\r\n\r\n\r\n  export const deleteBlog = async (req, res) => {\r\n    try {\r\n     await Blog.deleteOne({ _id: req.params.id });\r\n      res.status(207).send({ok:'delete success'});\r\n    } catch (error){\r\n     /* istanbul ignore next*/\r\n      res.status(406);\r\n      res.send({ error: \"blog doesn't exist!\" });\r\n    }\r\n  }\r\n\r\n  export const updateSingleBlog = async (req, res) => {\r\n    /* istanbul ignore next*/\r\n    try {\r\n      const blog = await Blog.findOne({ _id: req.params.id });\r\n  \r\n      if (req.body.title) {\r\n        blog.title = req.body.title;\r\n      }\r\n      if (req.body.body) {\r\n        blog.body = req.body.body;\r\n      }\r\n      if (req.file) {\r\n        blog.image = req.file.path;\r\n        const result = await cloudinary.uploader.upload(req.file.path, {\r\n          folder: 'portfolio/blogImages',\r\n          public_id: `${blog.title}_image`,\r\n        });\r\n        blog.image = result.url;\r\n      }\r\n      await blog.save();\r\n      res.status(201).json({\r\n        status: 201,\r\n        success: true,\r\n        message: 'Blog updated',\r\n        data: blog,\r\n      });\r\n    } catch (err) {\r\n      res\r\n        .status(400)\r\n        .json({ status: 400, success: false, message: \"Blog doesn't exist\" });\r\n    }\r\n  };\r\n\r\n\r\n  export const addComment = async (req, res) => {\r\n    /* istanbul ignore next*/\r\n    try {\r\n      const blog = await Blog.findOne({ _id: req.params.id });\r\n      if (!blog) {\r\n        res\r\n          .status(404)\r\n          /* istanbul ignore next*/\r\n          .json({ status: 404, success: false, message: \"Blog doesn't exist\" });\r\n        return;\r\n      } else {\r\n        blog.comments = [\r\n          ...blog.comments,\r\n          { comment: req.body.comment, user: req.user, blog: blog },\r\n        ];\r\n\r\n        blog.save();\r\n        res.status(201).json({\r\n          success: true,\r\n          message: `Comment added`,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      /* istanbul ignore next*/\r\n      res.status(500).json({\r\n        success: false,\r\n        message: `Server Error: Error when adding comment ${error.message}`,\r\n      });\r\n      console.log(`Error while adding comment ${error.message}`);\r\n    }\r\n  };\r\n  export const getAllComments = async (req, res) => {\r\n    try {\r\n      const blog = await Blog\r\n        .findOne({ _id: req.params.id })\r\n        .populate({\r\n          path: 'comments.user',\r\n          model: 'User',\r\n          select: 'username',\r\n        })\r\n        /* istanbul ignore next*/\r\n        .populate({ path: 'comments.blog', model: 'Blog', select: 'title' });\r\n      if (!blog) {\r\n        res.status(404).json({ error: \"Blog doesn't exist\" });\r\n        return;\r\n      }\r\n  \r\n      res.status(201).send(blog.comments);\r\n    } catch (error){\r\n      /* istanbul ignore next*/\r\n      res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n  };\r\n  /* istanbul ignore next*/\r\n  export const like = async (req, res) => {\r\n    try {\r\n      const blog = await Blog.findById(req.params.id);\r\n      if (!blog) {\r\n        return res.status(404).send({\r\n          statusCode: 404,\r\n          success: false,\r\n          data: { message: 'Blog not found!' },\r\n        });\r\n      }\r\n      //check if the blog is already liked\r\n      const alreadyLiked = blog.likes.find(\r\n        (like) => like.user.toString() === req.user._id.toString(),\r\n      );\r\n      //unlike the blog\r\n      if (alreadyLiked) {\r\n        blog.likes = blog.likes.filter(\r\n          (like) => like.user.toString() !== req.user._id.toString(),\r\n        );\r\n      } else {\r\n        blog.likes.push({\r\n          user: req.user._id,\r\n          blog: req.params.blogId,\r\n        });\r\n      }\r\n      await blog.save();\r\n      res.status(201).json({\r\n        statusCode: 201,\r\n        success: true,\r\n        data: [{ message: 'Done', body: blog }],\r\n      });\r\n    } catch (error) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: `Server Error: Error when liking or disliking ${error.message}`,\r\n      });\r\n    }\r\n  };\r\n  /* istanbul ignore next*/\r\n export const likesCounting = async (req, res) => {\r\n  /* istanbul ignore next*/\r\n    try {\r\n      const blog = await Blog.findOne({ _id: req.params.id });\r\n      if (!blog) {\r\n        res\r\n          .status(404)\r\n          .json({ status: 404, success: false, message: \"Blog doesn't exist\" });\r\n      } else {\r\n        /* istanbul ignore next*/\r\n        res.status(200).json({\r\n          status: 200,\r\n          success: true,\r\n          message: `Number of likes: ${blog.likes.length}`,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      /* istanbul ignore next*/\r\n      res.status(500).json({\r\n        success: false,\r\n        message: `Server Error: Error when fetching likes ${error.message}`,\r\n      });\r\n    }\r\n  };\r\n  \r\n\r\n "],"mappings":"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"}