{"version":3,"file":"user.test.js","names":["request","supertest","jwt","mongoose","dotenv","app","expect","jest","test","response","config","path","User","setTimeout","beforeEach","connect","process","env","MONGO_URI_TEST","useNewUrlParser","afterEach","connection","close","describe","it","done","post","send","firstName","lastName","email","password","loginData","token","res","body","chai","end","err","should","have","status"],"sources":["../../../src/--test--/user.test.js"],"sourcesContent":["import request from \"supertest\";\r\nimport supertest from \"supertest\";\r\nimport jwt from 'jsonwebtoken';\r\nimport mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\nimport app from \"../app.js\";\r\nimport {expect, jest, test} from '@jest/globals';\r\nimport  response  from \"supertest\";\r\ndotenv.config({ path: \"../.env\" });\r\n\r\nimport User from \"../models/likesModel\"\r\n/* Connecting to the database before each test. */\r\njest.setTimeout(20000);\r\nbeforeEach(async () => {\r\n  await mongoose.connect(process.env.MONGO_URI_TEST, { useNewUrlParser: true });\r\n});\r\n/* Closing database connection after each test. */\r\nafterEach(async () => {\r\n  await mongoose.connection.close();\r\n});\r\n\r\n\r\n\r\ndescribe('testing Login routes', () => {\r\n\r\n   \r\n      it('create  new user', (done) => {\r\n        response(app).post('/api/signup')\r\n        .send ({\r\n            firstName: \"okero\",\r\n            lastName:\"Okeellojado\",\r\n            email: \"jadorugirariallo@gmail.com\",\r\n            password: \"jadaoo\",\r\n        }).expect(404);\r\n        done();\r\n      });\r\n\r\n\r\nit('it should not login without email and password', (done) => {\r\n  const loginData = {};\r\n  response(app)\r\n    .post('/api/signin')\r\n    .send({loginData})\r\n    .expect(200);\r\n      done();\r\n    \r\n});\r\n});\r\n\r\ndescribe('Testing login routes', () => {\r\nlet token=res.body.token;\r\nit('it should log in into system ', (done) => {\r\n  chai\r\n    .request(app)\r\n    .post('/api/signin')\r\n    .send({\r\n      email: \"jadorugirariallo@gmail.com\",\r\n      password: \"jadaoo\",\r\n    })\r\n    .end((err, res) => {\r\n      res.should.have.status(200);\r\n    //   res.body.should.have.property(\"message\");\r\n    //   res.body.should.have.property(\"data\");\r\n      token = res.body.token;\r\n      done();\r\n    });\r\n});\r\n})\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAOC,GAAG,MAAM,cAAc;AAC9B,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,GAAG,MAAM,WAAW;AAC3B,SAAQC,MAAM,EAAEC,IAAI,EAAEC,IAAI,QAAO,eAAe;AAChD,OAAQC,QAAQ,MAAO,WAAW;AAClCL,MAAM,CAACM,MAAM,CAAC;EAAEC,IAAI,EAAE;AAAU,CAAC,CAAC;AAElC,OAAOC,IAAI,MAAM,sBAAsB;AACvC;AACAL,IAAI,CAACM,UAAU,CAAC,KAAK,CAAC;AACtBC,UAAU,CAAC,YAAY;EACrB,MAAMX,QAAQ,CAACY,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,cAAc,EAAE;IAAEC,eAAe,EAAE;EAAK,CAAC,CAAC;AAC/E,CAAC,CAAC;AACF;AACAC,SAAS,CAAC,YAAY;EACpB,MAAMjB,QAAQ,CAACkB,UAAU,CAACC,KAAK,EAAE;AACnC,CAAC,CAAC;AAIFC,QAAQ,CAAC,sBAAsB,EAAE,MAAM;EAGjCC,EAAE,CAAC,kBAAkB,EAAGC,IAAI,IAAK;IAC/BhB,QAAQ,CAACJ,GAAG,CAAC,CAACqB,IAAI,CAAC,aAAa,CAAC,CAChCC,IAAI,CAAE;MACHC,SAAS,EAAE,OAAO;MAClBC,QAAQ,EAAC,aAAa;MACtBC,KAAK,EAAE,4BAA4B;MACnCC,QAAQ,EAAE;IACd,CAAC,CAAC,CAACzB,MAAM,CAAC,GAAG,CAAC;IACdmB,IAAI,EAAE;EACR,CAAC,CAAC;EAGRD,EAAE,CAAC,gDAAgD,EAAGC,IAAI,IAAK;IAC7D,MAAMO,SAAS,GAAG,CAAC,CAAC;IACpBvB,QAAQ,CAACJ,GAAG,CAAC,CACVqB,IAAI,CAAC,aAAa,CAAC,CACnBC,IAAI,CAAC;MAACK;IAAS,CAAC,CAAC,CACjB1B,MAAM,CAAC,GAAG,CAAC;IACVmB,IAAI,EAAE;EAEZ,CAAC,CAAC;AACF,CAAC,CAAC;AAEFF,QAAQ,CAAC,sBAAsB,EAAE,MAAM;EACvC,IAAIU,KAAK,GAACC,GAAG,CAACC,IAAI,CAACF,KAAK;EACxBT,EAAE,CAAC,+BAA+B,EAAGC,IAAI,IAAK;IAC5CW,IAAI,CACDpC,OAAO,CAACK,GAAG,CAAC,CACZqB,IAAI,CAAC,aAAa,CAAC,CACnBC,IAAI,CAAC;MACJG,KAAK,EAAE,4BAA4B;MACnCC,QAAQ,EAAE;IACZ,CAAC,CAAC,CACDM,GAAG,CAAC,CAACC,GAAG,EAAEJ,GAAG,KAAK;MACjBA,GAAG,CAACK,MAAM,CAACC,IAAI,CAACC,MAAM,CAAC,GAAG,CAAC;MAC7B;MACA;MACER,KAAK,GAAGC,GAAG,CAACC,IAAI,CAACF,KAAK;MACtBR,IAAI,EAAE;IACR,CAAC,CAAC;EACN,CAAC,CAAC;AACF,CAAC,CAAC"}