{"version":3,"file":"Blog.test.js","names":["request","supertest","jwt","mongoose","dotenv","app","expect","jest","test","response","config","path","Query","Blog","userModel","getAllUsers","getAllUsersById","deleteSingleUserById","UpdateOne","httpCreateQuery","findQueri","deletequery","signInToken","id","setTimeout","beforeEach","set","connect","process","env","MONGO_URI_TEST","useNewUrlParser","create","title","body","image","comments","likes","error","console","log","message","afterEach","connection","close","describe","it","mockUsers","name","find","fn","mockResolvedValue","req","res","status","mockReturnThis","send","toHaveBeenCalledTimes","toHaveBeenCalledWith","mockUser","_id","findById","params","deleteOne","deletedCount","ok","json","restoreAllMocks","mockUpdateUser","spyOn","email","content","clearAllMocks","mockQuery","prototype","mockResolvedValueOnce","success","queries","text"],"sources":["../../../src/--test--/Blog.test.js"],"sourcesContent":["import request from \"supertest\";\r\nimport supertest from \"supertest\";\r\nimport jwt from 'jsonwebtoken';\r\nimport mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\nimport app from \"../app.js\";\r\nimport {expect, jest, test} from '@jest/globals';\r\nimport  response  from \"supertest\";\r\ndotenv.config({ path: \"../.env\" });\r\nimport Query from \"../models/Queries.model.js\";\r\nimport Blog from \"../models/Blogs.model.js\";\r\n// import { describe } from \"@hapi/joi/lib/base.js\";\r\nimport userModel from '../Models/userModel.js';\r\nimport { getAllUsers, getAllUsersById ,deleteSingleUserById ,UpdateOne} from \"../controllers/userController.js\";\r\nimport { httpCreateQuery, findQueri, deletequery } from \"../controllers/query.controller.js\";\r\n// import UpdateOne from \"../controllers/userController\";\r\n\r\n\r\ndotenv.config()\r\n\r\n\r\nconst signInToken = (id) => {};\r\n\r\n/* Connecting to the database before each test. */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\njest.setTimeout(20000);\r\nbeforeEach(async () => {\r\n  try {\r\n    mongoose.set('strictQuery', false);\r\n    await mongoose.connect(process.env.MONGO_URI_TEST, { useNewUrlParser: true });\r\n    await Blog.create({\r\n      title: 'okelloalan',\r\n      body: 'ways',\r\n      image:\r\n        'http://res.cloudinary.com/dsvjwhgtk/image/upload/v1675778580/portfolio/blogImages/Title%203_image.jpg',\r\n      comments: [],\r\n      likes: [],\r\n    });\r\n    // await userModel.create({\r\n    //   username: 'username',\r\n    //   email: 'email@gmail.com',\r\n    //   password: 'password',\r\n    //   isAdmin: 'true',\r\n    // });\r\n  } \r\n    \r\n   catch (error) {\r\n    console.log(error.message);\r\n  }\r\n \r\n});\r\n/* Closing database connection after each test. */\r\nafterEach(async () => {\r\n  await mongoose.connection.close();\r\n});\r\n\r\n\r\ndescribe('getAllUsers', () => {\r\n  it('should return all users', async () => {\r\n    const mockUsers = [{ name: 'User 1' }, { name: 'User 2' }];\r\n    userModel.find = jest.fn().mockResolvedValue(mockUsers);\r\n    const req = {};\r\n    const res = {\r\n      status: jest.fn().mockReturnThis(),\r\n      send: jest.fn(),\r\n    };\r\n    await getAllUsers(req, res);\r\n    expect(userModel.find).toHaveBeenCalledTimes(1);\r\n    expect(res.status).toHaveBeenCalledWith(200);\r\n    expect(res.send).toHaveBeenCalledWith(mockUsers);\r\n  });\r\n\r\n  it('should return a user with the specified ID', async () => {\r\n    const mockUser = { name: 'User 1', _id: '123' };\r\n    userModel.findById = jest.fn().mockResolvedValue(mockUser);\r\n    const req = { params: { id: '123' } };\r\n    const res = {\r\n      status: jest.fn().mockReturnThis(),\r\n      send: jest.fn(),\r\n    };\r\n    await getAllUsersById(req, res);\r\n    expect(userModel.findById).toHaveBeenCalledWith({ _id: '123' });\r\n    expect(res.status).toHaveBeenCalledWith(200);\r\n    expect(res.send).toHaveBeenCalledWith(mockUser);\r\n  });\r\n\r\n  it('should delete the user with the specified ID', async () => {\r\n    userModel.deleteOne = jest.fn().mockResolvedValue({ deletedCount: 1 });\r\n    const req = { params: { id: '123' } };\r\n    const res = {\r\n      status: jest.fn().mockReturnThis(),\r\n      send: jest.fn(),\r\n    };\r\n    await deleteSingleUserById(req, res);\r\n    expect(userModel.deleteOne).toHaveBeenCalledWith({ _id: '123' });\r\n    expect(res.status).toHaveBeenCalledWith(207);\r\n    expect(res.send).toHaveBeenCalledWith({ ok: 'delete success' });\r\n  });\r\n\r\n});\r\n\r\ndescribe('UpdateOne', () => {\r\n  let req;\r\n  let res;\r\n\r\n  beforeEach(() => {\r\n    req = {\r\n      params: { id: '1' },\r\n      body: { name: 'John Doe' },\r\n    };\r\n    res = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn(),\r\n    };\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  it('should return a success message when update succeeds', async () => {\r\n    const mockUpdateUser = { name: 'John Doe', _id: '1' };\r\n    jest.spyOn(userModel, 'findByIdAndUpdate').mockResolvedValue(mockUpdateUser);\r\n\r\n    await UpdateOne(req, res);\r\n\r\n    expect(res.status).toHaveBeenCalledWith(200);\r\n    expect(res.json).toHaveBeenCalledWith({\r\n      status: 'success',\r\n      message: 'Update success done ',\r\n    });\r\n  });\r\n\r\n\r\n});\r\n\r\n\r\n\r\n\r\ndescribe('api test Queries', () => {\r\n  let req, res;\r\n\r\n  beforeEach(() => {\r\n    req = { body: { name: 'User', email: '63ef3ab2c17e649f9388412f', content: 'well' } };\r\n    res = { status: jest.fn().mockReturnThis(), json: jest.fn() };\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should create a new query', async () => {\r\n    const mockQuery = new Query(req.body);\r\n    jest.spyOn(Query.prototype, 'save').mockResolvedValueOnce(mockQuery);\r\n\r\n    await httpCreateQuery(req, res);\r\n\r\n    expect(res.status).toHaveBeenCalledWith(201);\r\n    expect(res.json).toHaveBeenCalledWith({\r\n      success: true,\r\n      message: 'query create succefully',\r\n      Query: mockQuery,\r\n    });\r\n  });\r\n\r\n  it('should call with the queries', async () => {\r\n    const queries = [{ id: 1, text: 'Hello' }, { id: 2, text: 'World' }];\r\n    Query.find = jest.fn().mockResolvedValue(queries);\r\n\r\n    const req = {};\r\n    const res = { send: jest.fn() };\r\n\r\n    await findQueri(req, res);\r\n\r\n    expect(Query.find).toHaveBeenCalledTimes(1);\r\n    expect(res.send).toHaveBeenCalledWith(queries);\r\n  });\r\n\r\n  \r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// describe(\"GET /api/v1/query\", () => {\r\n//     test('should respond with a 203 status code', async () => {\r\n//       const response = await request(app).get(\"/api/query/get\")\r\n//       expect(response.statusCode).toBe(203)\r\n//     })\r\n//   })\r\n\r\n// // //post\r\n\r\n// describe(\"create /api/query\", () => {\r\n//     test('should respond with a 201 status code', async () => {\r\n//       const response = await request(app).post(\"/api/query/send\").send({})\r\n//       expect(response.statusCode).toBe(201)\r\n//     })\r\n//   })\r\n  \r\n\r\n//   describe(\"DELETE /api/query/:id\", () => {\r\n//     it(\"should respond with a 207 status code\", async () => {\r\n//       const response = await request(app).delete(\"/api/query/63de55283cbabcaf0123f51e\")\r\n//       expect(response.statusCode).toBe(207);\r\n//     });\r\n//   });\r\n\r\n \r\n\r\n\r\n\r\n//     //update query\r\n\r\n   \r\n// // get all blogs\r\n\r\n// describe(\"blog testing\", () => {\r\n//   const blogData = {\r\n//     title: \"okelloalan\",\r\n//     body: \"ways\",\r\n//   }\r\n \r\n\r\n\r\n\r\n//  //post blog\r\n//  describe('POST /blog', () => {\r\n//   test('It should respond with status code 201', async () => {\r\n//     const response = await request(app)\r\n//       .post('/api/blogs')\r\n//       .send({\r\n//         title: 'okelloalan',\r\n//         body: 'ways',\r\n//         image: 'https://testblogimage.com/test.jpg',\r\n//       })\r\n//       .set('Content-Type', 'application/json');\r\n//     expect(response.statusCode).toBe(201);\r\n//   });\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n//     describe(\"GET /api/blogss\", () => {\r\n//       test('should respond with a 200 status code', async () => {\r\n//         const response = await request(app).get(\"/api/blogs\")\r\n//         expect(response.statusCode).toBe(200)\r\n//       })\r\n//     });\r\n//     //by id\r\n//     describe(\"GET /api/blogss\", () => {\r\n//       test('should respond with a 404 status code', async () => {\r\n//         const response = await request(app).get(\"/api/blogs/63e8c634d7a3542707a55caa\")\r\n//         expect(response.statusCode).toBe(200)\r\n//       })\r\n//     });\r\n//     //update single blog\r\n// describe(\"UPDATE /api/blogs/:id\", () => {\r\n//   it('should respond with a 400 status code', async () => {\r\n//     const response = await request(app).patch(\"/api/blogs/:id\")\r\n//     .send(blogData)\r\n//     expect(response.statusCode).toBe(400)\r\n//   })\r\n// })\r\n\r\n// it('get all blogs', async () => {\r\n//   const res = await request(app).get('/api/blogs');\r\n//   expect(res.status).toEqual(200);\r\n//   const blog = res.body.data;\r\n//   expect(Array.isArray(blog)).toBe(true);\r\n//   expect(blog[0]).toHaveProperty(\r\n//     'title',\r\n//     'content',\r\n//     'image',\r\n//     'likes',\r\n//     'comments',\r\n//     '_id',\r\n//   );\r\n// });\r\n\r\n//   })\r\n//   //delete blog\r\n//   describe(\"DELETE /api/blogs/:id\", () => {\r\n//     it(\"should respond with a 200 status code\", async () => {\r\n//       const response = await request(app).delete(\"/api/blogs/63e21c99208aa0b5bd58ff8f\")\r\n//       expect(response.statusCode).toBe(207);\r\n//     });\r\n//   });\r\n\r\n\r\n\r\n  \r\n// // })\r\n\r\n// //add all comments on blo\r\n\r\n//  //add comment\r\n \r\n//   describe('get all users', () => {\r\n//     const token =  process.env.TOKEN_SECRET\r\n\r\n//     it('get all users', async () => {\r\n//       const res = await request(app).get('/api/signin');\r\n//       expect(res.status).toEqual(200);\r\n//     });\r\n    \r\n//     const userData = {\r\n//       email: \"gahuza@gmail.com\",\r\n//       password: \"gahuza\",\r\n//     }\r\n//     it('create  new user', async () => {\r\n//       const res = await (await request(app).post('/api/signup'));\r\n//       expect(res.status).toEqual(200);\r\n//     });\r\n//     it('delete user', async () => {\r\n//       const res = await (await request(app).delete('/api/signIn/63de55283cbabcaf0123f51e'));\r\n//       expect(res.status).toEqual(207);\r\n//     });\r\n\r\n//     describe(\"UPDATE /api/user/:id\", () => {\r\n//       it('should respond with a 400 status code', async () => {\r\n//         const response = await request(app).patch(\"/api/signIn/63e21c99208aa0b5bd58ff8f\")\r\n//         .send(userData)\r\n//         expect(response.statusCode).toBe(404)\r\n//       })\r\n//     })\r\n// });\r\n\r\n//     //get single blog\r\n\r\n//     //add comments token\r\n//   //add comment\r\n//   describe('POST /blogs/:id/comments', () => {\r\n//     it('adds a comment to a blog post', async () => {\r\n//       // Mock the Blog.findOne method to return a valid blog object\r\n//       const mockBlog = {\r\n//         _id: 'abc123',\r\n//         comments: [],\r\n//         save: jest.fn(),\r\n//       };\r\n//       jest.spyOn(Blog, 'findOne').mockResolvedValue(mockBlog);\r\n  \r\n//       // Send a POST request to the endpoint with a comment in the request body\r\n//       const res = await request(app)\r\n//         .post('/blogs/63e8c634d7a3542707a55caa/comments')\r\n//         .send({ comment: 'This is a comment.' });\r\n  \r\n//       // Assert that the response has a 201 status code\r\n//       expect(res.status).toBe(201);\r\n  \r\n//       // Assert that the response body has a success property that is true\r\n//       expect(res.body.success).toBe(true);\r\n  \r\n//       // Assert that the response body has a message property that contains \"Comment added\"\r\n//       expect(res.body.message).toContain('Comment added');\r\n  \r\n//       // Assert that the blog's comments array was updated with the new comment\r\n//       expect(mockBlog.comments).toContainEqual({\r\n//         comment: 'This is a comment.',\r\n//         user: expect.any(Object),\r\n//         blog: mockBlog,\r\n//       });\r\n//     });\r\n  \r\n//     afterEach(() => {\r\n//       jest.restoreAllMocks(); // reset the mock after each test\r\n//     });\r\n//   });\r\n\r\n  \r\n  \r\n  \r\n\r\n\r\n\r\n\r\n//    //add comment\r\n//    describe('POST /blogs/:id/comments', () => {\r\n//     it('return a 201 status if user is not logged in', async () => {\r\n//       const comment = {\r\n//         comment: 'well',\r\n//       };\r\n//       const res = await request(app).post('/api/blogs/comments/63e373de2ffaef80bcc03c95').send(comment);\r\n//       expect(res.status).toEqual(201);\r\n//     });\r\n  \r\n   \r\n//   })\r\n//   describe(\"GET /api/comment\", () => {\r\n//     test('should respond with a 404 status code', async () => {\r\n//       const response = await request(app).get(\"/api/comments/63e373de2ffaef80bcc03c95\")\r\n//       expect(response.statusCode).toBe(404)\r\n//     })\r\n  \r\n//   })\r\n\r\n\r\n//   //comments\r\n//   describe('GET /blogs/:id/comments', () => {\r\n//     it(\"return a 400 status if '_id' is invalid\", async () => {\r\n//       const res = await request(app).get('/api/comments/63e373de2ffaef80bcc03c95');\r\n//       expect(res.status).toEqual(404);\r\n//       const message = res.body.message;\r\n//       expect(message).toEqual(\"Blog doesn't exist\");\r\n//     });\r\n//     it('return one blog', async () => {\r\n//       const allBlogs = await request(app).get('/api/blogs');\r\n//       const currentBlog = allBlogs.body.data[0];\r\n//       const id = currentBlog._id;\r\n//       const res = await request(app).get(`/api/comments/${id}`);\r\n//       expect(res.status).toEqual(200);\r\n//     });})\r\n\r\n//    //add or remove like\r\n//    describe('POST /blogs/:id/likes', () => {\r\n//     it('return a 500 status if user is not logged in', async () => {\r\n//       const res = await request(app).post('/api/blogs/63e373de2ffaef80bcc03c95/likes').send({});\r\n//       expect(res.status).toEqual(401);\r\n//     });\r\n//     describe(\"GET /api/likes\", () => {\r\n//       test('should respond with a 404 status code', async () => {\r\n//         const response = await request(app).get(\"/api/blogs/63e373de2ffaef80bcc03c95/likes\")\r\n//         expect(response.statusCode).toBe(404)\r\n//       })\r\n    \r\n//     })\r\n\r\n//     it(\"return a 400 status if blog doesn't exist\", async () => {\r\n//       const user = {\r\n//         email: 'gahuza@gmail.com',\r\n//         password: 'gahuza',\r\n//       };\r\n\r\n//       const login = await request(app).post('/api/signin').send(user);\r\n//       const token = login.body.token;\r\n//       const allBlogs = await request(app).get('/api/blogs/63e373de2ffaef80bcc03c95/likes');\r\n//       const currentBlog = allBlogs.body.data;\r\n//       const id = currentBlog._id;\r\n//       const updatedBlog = await request(app)\r\n//         .post(`/api/blogs/${id + 1}/likes`)\r\n//         .set('auth' + token);\r\n//       expect(updatedBlog.status).toEqual(401);\r\n//       const message = updatedBlog.body.message;\r\n//       expect(message).toEqual(\"Blog doesn't exist!\");\r\n//     });\r\n\r\n  \r\n//   })\r\n\r\n//   //add and remove like\r\n//   describe('POST /like/:id', () => {\r\n//     let blog;\r\n  \r\n//     beforeAll(async () => {\r\n//       // create a sample blog to be used in the tests\r\n//       blog = await Blog.create({\r\n//         title: 'Test Blog',\r\n//         content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\r\n//         likes: [],\r\n//       });\r\n//     });\r\n  \r\n//     // afterAll(async () => {\r\n//     //   // remove the sample blog after all tests are done\r\n//     //   await Blog.deleteOne({ _id: blog._id });\r\n//     // });\r\n  \r\n//     it('should like a blog if not already liked', async () => {\r\n//       const response = await request(app)\r\n//         .post(`/like/${`63e8c634d7a3542707a55caa`}`)\r\n//         .send({})\r\n//         .expect(201);\r\n  \r\n//       expect(response.body.success).toBe(true);\r\n//       expect(response.body.data[0].body.likes.length).toBe(1);\r\n//     });\r\n  \r\n//     it('should unlike a blog if already liked', async () => {\r\n//       // like the blog first\r\n//       await request(app).post(`/like/${blog._id}`).send({});\r\n  \r\n//       const response = await request(app)\r\n//         .post(`/like/${`63e8c634d7a3542707a55caa`}`)\r\n//         .send({})\r\n//         .expect(201);\r\n  \r\n//       expect(response.body.success).toBe(true);\r\n//       expect(response.body.data[0].body.likes.length).toBe(0);\r\n//     });\r\n  \r\n//     it('should return 404 if blog not found', async () => {\r\n//       const response = await request(app)\r\n//         .post(`/like/non-existent-id`)\r\n//         .send({})\r\n//         .expect(404);\r\n  \r\n//       expect(response.body.success).toBe(false);\r\n//       expect(response.body.data.message).toBe('Blog not found!');\r\n//     });\r\n//   });\r\n\r\n   \r\n//          // add comment\r\n  \r\n//   // get all comments\r\n//   // describe('GET /blogs/:id/comments', () => {\r\n//   //   it(\"return a 400 status if '_id' is invalid\", async () => {\r\n//   //     const res = await request(app).get('/api/blogs/23333/comments');\r\n//   //     expect(res.status).toEqual(400);\r\n//   //     const message = res.body.message;\r\n//   //     expect(message).toEqual(\"Blog doesn't exist\");\r\n//   //   });\r\n//   //   it('return one blog', async () => {\r\n//   //     const allBlogs = await request(app).get('/api/blogs');\r\n//   //     const currentBlog = allBlogs.body.data[0];\r\n//   //     const id = currentBlog._id;\r\n//   //     const res = await request(app).get(`/api/blogs/${id}/comments`);\r\n//   //     expect(res.status).toEqual(200);\r\n//   //   });\r\n//   // });\r\n  \r\n\r\n//    //like counting\r\n//    describe('GET /likesCounting/:id', () => {\r\n//     let blog;\r\n  \r\n//     beforeAll(async () => {\r\n//       // create a sample blog to be used in the tests\r\n//       blog = await Blog.create({\r\n//         title: 'Test Blog',\r\n//         body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\r\n//         likes: [\r\n//           { user: 'user1', blog: 'blog1' },\r\n//           { user: 'user2', blog: 'blog1' },\r\n//         ],\r\n//       });\r\n//     });\r\n  \r\n//     afterAll(async () => {\r\n//       // remove the sample blog after all tests are done\r\n//       await Blog.deleteOne({ _id: `63e8c634d7a3542707a55caa`});\r\n//     });\r\n  \r\n//     it('should return the number of likes for a blog', async () => {\r\n//       const response = await request(app)\r\n//         .get(`/likesCounting/${`63e8c634d7a3542707a55caa`}`)\r\n//         .expect(200);\r\n  \r\n//       expect(response.body.success).toBe(true);\r\n//       expect(response.body.message).toContain(blog.likes.length);\r\n//     });\r\n  \r\n//     it('should return 404 if blog not found', async () => {\r\n//       const response = await request(app)\r\n//         .get(`/likesCounting/non-existent-id`)\r\n//         .expect(404);\r\n  \r\n//       expect(response.body.success).toBe(false);\r\n//       expect(response.body.message).toBe(\"Blog doesn't exist\");\r\n//     });\r\n//   });"],"mappings":"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AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"}