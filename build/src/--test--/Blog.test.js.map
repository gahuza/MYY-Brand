{"version":3,"file":"Blog.test.js","names":["request","supertest","jwt","mongoose","dotenv","app","expect","jest","test","response","config","path","Blog","setTimeout","beforeEach","set","connect","process","env","MONGO_URI_TEST","useNewUrlParser","create","title","body","image","comments","likes","error","console","log","message","afterEach","connection","close","describe","get","statusCode","toBe","post","send","it","delete","blogData","patch","res","status","toEqual","blog","data","Array","isArray","toHaveProperty","token","TOKEN_SECRET","userData","email","password","mockBlog","_id","save","fn","spyOn","mockResolvedValue","comment","success","toContain","toContainEqual","user","any","Object","restoreAllMocks","login","allBlogs","currentBlog","id","updatedBlog","length"],"sources":["../../../src/--test--/Blog.test.js"],"sourcesContent":["import request from \"supertest\";\r\nimport supertest from \"supertest\";\r\nimport jwt from 'jsonwebtoken';\r\nimport mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\nimport app from \"../app.js\";\r\nimport {expect, jest, test} from '@jest/globals';\r\nimport  response  from \"supertest\";\r\ndotenv.config({ path: \"../.env\" });\r\n// import Query from \"../models/Queries.model.js\";\r\nimport Blog from \"../models/Blogs.model.js\";\r\n\r\n/* Connecting to the database before each test. */\r\njest.setTimeout(20000);\r\nbeforeEach(async () => {\r\n  try {\r\n    mongoose.set('strictQuery', false);\r\n    await mongoose.connect(process.env.MONGO_URI_TEST, { useNewUrlParser: true });\r\n    await Blog.create({\r\n      title: 'okelloalan',\r\n      body: 'ways',\r\n      image:\r\n        'http://res.cloudinary.com/dsvjwhgtk/image/upload/v1675778580/portfolio/blogImages/Title%203_image.jpg',\r\n      comments: [],\r\n      likes: [],\r\n    });\r\n    // await userModel.create({\r\n    //   username: 'username',\r\n    //   email: 'email@gmail.com',\r\n    //   password: 'password',\r\n    //   isAdmin: 'true',\r\n    // });\r\n  } \r\n    \r\n   catch (error) {\r\n    console.log(error.message);\r\n  }\r\n \r\n});\r\n/* Closing database connection after each test. */\r\nafterEach(async () => {\r\n  await mongoose.connection.close();\r\n});\r\n\r\n\r\n\r\n\r\n\r\ndescribe(\"GET /api/v1/query\", () => {\r\n    test('should respond with a 203 status code', async () => {\r\n      const response = await request(app).get(\"/api/query/get\")\r\n      expect(response.statusCode).toBe(203)\r\n    })\r\n  })\r\n\r\n// //post\r\n\r\ndescribe(\"create /api/query\", () => {\r\n    test('should respond with a 201 status code', async () => {\r\n      const response = await request(app).post(\"/api/query/send\").send({})\r\n      expect(response.statusCode).toBe(201)\r\n    })\r\n  })\r\n  \r\n\r\n  describe(\"DELETE /api/query/:id\", () => {\r\n    it(\"should respond with a 207 status code\", async () => {\r\n      const response = await request(app).delete(\"/api/query/63de55283cbabcaf0123f51e\")\r\n      expect(response.statusCode).toBe(207);\r\n    });\r\n  });\r\n\r\n \r\n\r\n\r\n\r\n    //update query\r\n\r\n   \r\n// get all blogs\r\n\r\ndescribe(\"blog testing\", () => {\r\n  const blogData = {\r\n    title: \"okelloalan\",\r\n    body: \"ways\",\r\n  }\r\n \r\n\r\n\r\n\r\n //post blog\r\n describe('POST /blog', () => {\r\n  test('It should respond with status code 201', async () => {\r\n    const response = await request(app)\r\n      .post('/api/blogs')\r\n      .send({\r\n        title: 'okelloalan',\r\n        body: 'ways',\r\n        image: 'https://testblogimage.com/test.jpg',\r\n      })\r\n      .set('Content-Type', 'application/json');\r\n    expect(response.statusCode).toBe(201);\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n    describe(\"GET /api/blogss\", () => {\r\n      test('should respond with a 200 status code', async () => {\r\n        const response = await request(app).get(\"/api/blogs\")\r\n        expect(response.statusCode).toBe(200)\r\n      })\r\n    });\r\n    //by id\r\n    describe(\"GET /api/blogss\", () => {\r\n      test('should respond with a 404 status code', async () => {\r\n        const response = await request(app).get(\"/api/blogs/63e8c634d7a3542707a55caa\")\r\n        expect(response.statusCode).toBe(200)\r\n      })\r\n    });\r\n    //update single blog\r\ndescribe(\"UPDATE /api/blogs/:id\", () => {\r\n  it('should respond with a 400 status code', async () => {\r\n    const response = await request(app).patch(\"/api/blogs/:id\")\r\n    .send(blogData)\r\n    expect(response.statusCode).toBe(400)\r\n  })\r\n})\r\n\r\nit('get all blogs', async () => {\r\n  const res = await request(app).get('/api/blogs');\r\n  expect(res.status).toEqual(200);\r\n  const blog = res.body.data;\r\n  expect(Array.isArray(blog)).toBe(true);\r\n  expect(blog[0]).toHaveProperty(\r\n    'title',\r\n    'content',\r\n    'image',\r\n    'likes',\r\n    'comments',\r\n    '_id',\r\n  );\r\n});\r\n\r\n  })\r\n  //delete blog\r\n  describe(\"DELETE /api/blogs/:id\", () => {\r\n    it(\"should respond with a 200 status code\", async () => {\r\n      const response = await request(app).delete(\"/api/blogs/63e21c99208aa0b5bd58ff8f\")\r\n      expect(response.statusCode).toBe(207);\r\n    });\r\n  });\r\n\r\n\r\n\r\n  \r\n// })\r\n\r\n//add all comments on blo\r\n\r\n //add comment\r\n \r\n  describe('get all users', () => {\r\n    const token =  process.env.TOKEN_SECRET\r\n\r\n    it('get all users', async () => {\r\n      const res = await request(app).get('/api/signin');\r\n      expect(res.status).toEqual(200);\r\n    });\r\n    \r\n    const userData = {\r\n      email: \"gahuza@gmail.com\",\r\n      password: \"gahuza\",\r\n    }\r\n    it('create  new user', async () => {\r\n      const res = await (await request(app).post('/api/signup'));\r\n      expect(res.status).toEqual(200);\r\n    });\r\n    it('delete user', async () => {\r\n      const res = await (await request(app).delete('/api/signIn/63de55283cbabcaf0123f51e'));\r\n      expect(res.status).toEqual(207);\r\n    });\r\n\r\n    describe(\"UPDATE /api/user/:id\", () => {\r\n      it('should respond with a 400 status code', async () => {\r\n        const response = await request(app).patch(\"/api/signIn/63e21c99208aa0b5bd58ff8f\")\r\n        .send(userData)\r\n        expect(response.statusCode).toBe(404)\r\n      })\r\n    })\r\n});\r\n\r\n    //get single blog\r\n\r\n    //add comments token\r\n  //add comment\r\n  describe('POST /blogs/:id/comments', () => {\r\n    it('adds a comment to a blog post', async () => {\r\n      // Mock the Blog.findOne method to return a valid blog object\r\n      const mockBlog = {\r\n        _id: 'abc123',\r\n        comments: [],\r\n        save: jest.fn(),\r\n      };\r\n      jest.spyOn(Blog, 'findOne').mockResolvedValue(mockBlog);\r\n  \r\n      // Send a POST request to the endpoint with a comment in the request body\r\n      const res = await request(app)\r\n        .post('/blogs/abc123/comments')\r\n        .send({ comment: 'This is a comment.' });\r\n  \r\n      // Assert that the response has a 201 status code\r\n      expect(res.status).toBe(201);\r\n  \r\n      // Assert that the response body has a success property that is true\r\n      expect(res.body.success).toBe(true);\r\n  \r\n      // Assert that the response body has a message property that contains \"Comment added\"\r\n      expect(res.body.message).toContain('Comment added');\r\n  \r\n      // Assert that the blog's comments array was updated with the new comment\r\n      expect(mockBlog.comments).toContainEqual({\r\n        comment: 'This is a comment.',\r\n        user: expect.any(Object),\r\n        blog: mockBlog,\r\n      });\r\n    });\r\n  \r\n    afterEach(() => {\r\n      jest.restoreAllMocks(); // reset the mock after each test\r\n    });\r\n  });\r\n\r\n  \r\n  \r\n  \r\n\r\n\r\n\r\n\r\n   //add comment\r\n   describe('POST /blogs/:id/comments', () => {\r\n    it('return a 201 status if user is not logged in', async () => {\r\n      const comment = {\r\n        comment: 'well',\r\n      };\r\n      const res = await request(app).post('/api/blogs/comments/63e373de2ffaef80bcc03c95').send(comment);\r\n      expect(res.status).toEqual(201);\r\n    });\r\n  \r\n   \r\n  })\r\n  describe(\"GET /api/comment\", () => {\r\n    test('should respond with a 404 status code', async () => {\r\n      const response = await request(app).get(\"/api/comments/63e373de2ffaef80bcc03c95\")\r\n      expect(response.statusCode).toBe(404)\r\n    })\r\n  \r\n  })\r\n\r\n\r\n   //add or remove like\r\n   describe('POST /blogs/:id/likes', () => {\r\n    it('return a 500 status if user is not logged in', async () => {\r\n      const res = await request(app).post('/api/blogs/63e373de2ffaef80bcc03c95/likes').send({});\r\n      expect(res.status).toEqual(401);\r\n    });\r\n    describe(\"GET /api/likes\", () => {\r\n      test('should respond with a 404 status code', async () => {\r\n        const response = await request(app).get(\"/api/blogs/63e373de2ffaef80bcc03c95/likes\")\r\n        expect(response.statusCode).toBe(404)\r\n      })\r\n    \r\n    })\r\n\r\n    it(\"return a 400 status if blog doesn't exist\", async () => {\r\n      const user = {\r\n        email: 'gahuza@gmail.com',\r\n        password: 'gahuza',\r\n      };\r\n\r\n      const login = await request(app).post('/api/signin').send(user);\r\n      const token = login.body.token;\r\n      const allBlogs = await request(app).get('/api/blogs/63e373de2ffaef80bcc03c95/likes');\r\n      const currentBlog = allBlogs.body.data;\r\n      const id = currentBlog._id;\r\n      const updatedBlog = await request(app)\r\n        .post(`/api/blogs/${id + 1}/likes`)\r\n        .set('auth' + token);\r\n      expect(updatedBlog.status).toEqual(401);\r\n      const message = updatedBlog.body.message;\r\n      expect(message).toEqual(\"Blog doesn't exist!\");\r\n    });\r\n\r\n  \r\n  })\r\n\r\n  //add and remove like\r\n  describe('POST /like/:id', () => {\r\n    let blog;\r\n  \r\n    // beforeAll(async () => {\r\n    //   // create a sample blog to be used in the tests\r\n    //   blog = await Blog.create({\r\n    //     title: 'Test Blog',\r\n    //     content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\r\n    //     likes: [],\r\n    //   });\r\n    // });\r\n  \r\n    // afterAll(async () => {\r\n    //   // remove the sample blog after all tests are done\r\n    //   await Blog.deleteOne({ _id: blog._id });\r\n    // });\r\n  \r\n    it('should like a blog if not already liked', async () => {\r\n      const response = await request(app)\r\n        .post(`/like/${blog._id}`)\r\n        .send({})\r\n        .expect(201);\r\n  \r\n      expect(response.body.success).toBe(true);\r\n      expect(response.body.data[0].body.likes.length).toBe(1);\r\n    });\r\n  \r\n    it('should unlike a blog if already liked', async () => {\r\n      // like the blog first\r\n      await request(app).post(`/like/${blog._id}`).send({});\r\n  \r\n      const response = await request(app)\r\n        .post(`/like/${blog._id}`)\r\n        .send({})\r\n        .expect(201);\r\n  \r\n      expect(response.body.success).toBe(true);\r\n      expect(response.body.data[0].body.likes.length).toBe(0);\r\n    });\r\n  \r\n    it('should return 404 if blog not found', async () => {\r\n      const response = await request(app)\r\n        .post(`/like/non-existent-id`)\r\n        .send({})\r\n        .expect(404);\r\n  \r\n      expect(response.body.success).toBe(false);\r\n      expect(response.body.data.message).toBe('Blog not found!');\r\n    });\r\n  });\r\n\r\n   \r\n         // add comment\r\n  \r\n  // get all comments\r\n  // describe('GET /blogs/:id/comments', () => {\r\n  //   it(\"return a 400 status if '_id' is invalid\", async () => {\r\n  //     const res = await request(app).get('/api/blogs/23333/comments');\r\n  //     expect(res.status).toEqual(400);\r\n  //     const message = res.body.message;\r\n  //     expect(message).toEqual(\"Blog doesn't exist\");\r\n  //   });\r\n  //   it('return one blog', async () => {\r\n  //     const allBlogs = await request(app).get('/api/blogs');\r\n  //     const currentBlog = allBlogs.body.data[0];\r\n  //     const id = currentBlog._id;\r\n  //     const res = await request(app).get(`/api/blogs/${id}/comments`);\r\n  //     expect(res.status).toEqual(200);\r\n  //   });\r\n  // });\r\n  \r\n\r\n   //like counting\r\n   describe('GET /likesCounting/:id', () => {\r\n    // let blog;\r\n  \r\n    // beforeAll(async () => {\r\n    //   // create a sample blog to be used in the tests\r\n    //   blog = await Blog.create({\r\n    //     title: 'Test Blog',\r\n    //     body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\r\n    //     likes: [\r\n    //       { user: 'user1', blog: 'blog1' },\r\n    //       { user: 'user2', blog: 'blog1' },\r\n    //     ],\r\n    //   });\r\n    // });\r\n  \r\n    // afterAll(async () => {\r\n    //   // remove the sample blog after all tests are done\r\n    //   await Blog.deleteOne({ _id: blog._id });\r\n    // });\r\n  \r\n    it('should return the number of likes for a blog', async () => {\r\n      const response = await request(app)\r\n        .get(`/likesCounting/${blog._id}`)\r\n        .expect(200);\r\n  \r\n      expect(response.body.success).toBe(true);\r\n      expect(response.body.message).toContain(blog.likes.length);\r\n    });\r\n  \r\n    it('should return 404 if blog not found', async () => {\r\n      const response = await request(app)\r\n        .get(`/likesCounting/non-existent-id`)\r\n        .expect(404);\r\n  \r\n      expect(response.body.success).toBe(false);\r\n      expect(response.body.message).toBe(\"Blog doesn't exist\");\r\n    });\r\n  });"],"mappings":"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"}