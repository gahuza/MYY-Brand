{"version":3,"file":"Blog.test.js","names":["request","supertest","jwt","mongoose","dotenv","app","expect","jest","test","response","config","path","setTimeout","beforeEach","connect","process","env","MONGO_URI_TEST","useNewUrlParser","afterEach","connection","close","describe","get","statusCode","toBe","post","send","it","delete","blogData","title","body","patch","token","TOKEN_SECRET","res","status","toEqual","userData","email","password","user","login","allBlogs","currentBlog","data","id","_id","updatedBlog","set","message"],"sources":["../../../src/--test--/Blog.test.js"],"sourcesContent":["import request from \"supertest\";\r\nimport supertest from \"supertest\";\r\nimport jwt from 'jsonwebtoken';\r\nimport mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\nimport app from \"../app.js\";\r\nimport {expect, jest, test} from '@jest/globals';\r\nimport  response  from \"supertest\";\r\ndotenv.config({ path: \"../.env\" });\r\n// import Query from \"../models/Queries.model.js\";\r\n// import Blog from \"../models/Blogs.model.js\";\r\n// import User from \"../models/likesModel\"\r\n/* Connecting to the database before each test. */\r\njest.setTimeout(20000);\r\nbeforeEach(async () => {\r\n  await mongoose.connect(process.env.MONGO_URI_TEST, { useNewUrlParser: true });\r\n});\r\n/* Closing database connection after each test. */\r\nafterEach(async () => {\r\n  await mongoose.connection.close();\r\n});\r\n\r\n\r\n\r\n\r\n\r\ndescribe(\"GET /api/v1/query\", () => {\r\n    test('should respond with a 203 status code', async () => {\r\n      const response = await request(app).get(\"/api/query/get\")\r\n      expect(response.statusCode).toBe(203)\r\n    })\r\n  })\r\n\r\n// //post\r\n\r\ndescribe(\"create /api/query\", () => {\r\n    test('should respond with a 201 status code', async () => {\r\n      const response = await request(app).post(\"/api/query/send\").send({})\r\n      expect(response.statusCode).toBe(201)\r\n    })\r\n  })\r\n  //delete blo\r\n\r\n\r\n  // describe('DELETE /api/blogs/:id', () => {\r\n  //   it('return a 207 status if user is not logged in', async () => {\r\n  //     const res = await request(app).delete('/api/blogs/:id').expect(res.status).toEqual(207);\r\n  //   });})\r\n\r\n\r\n  describe(\"DELETE /api/query/:id\", () => {\r\n    it(\"should respond with a 207 status code\", async () => {\r\n      const response = await request(app).delete(\"/api/query/63de55283cbabcaf0123f51e\")\r\n      expect(response.statusCode).toBe(207);\r\n    });\r\n  });\r\n\r\n \r\n  //delete\r\n\r\n\r\n//delete query\r\n\r\n\r\n    //update query\r\n\r\n   \r\n// get all blogs\r\n\r\ndescribe(\"blog testing\", () => {\r\n  const blogData = {\r\n    title: \"okelloalan\",\r\n    body: \"ways\",\r\n  }\r\n  describe(\"GET /api/blogss\", () => {\r\n    test('should respond with a 200 status code', async () => {\r\n      const response = await request(app).get(\"/api/blogs\")\r\n      expect(response.statusCode).toBe(200)\r\n    })\r\n  });\r\n  //by id\r\n  describe(\"GET /api/blogss\", () => {\r\n    test('should respond with a 404 status code', async () => {\r\n      const response = await request(app).get(\"/api/blogs/63e8c634d7a3542707a55caa\")\r\n      expect(response.statusCode).toBe(200)\r\n    })\r\n  });\r\n//update single blog\r\ndescribe(\"UPDATE /api/blogs/:id\", () => {\r\n  it('should respond with a 400 status code', async () => {\r\n    const response = await request(app).patch(\"/api/blogs/:id\")\r\n    .send(blogData)\r\n    expect(response.statusCode).toBe(400)\r\n  })\r\n})\r\n  //post blo\r\n  describe(\"create /api/blogs\", () => {\r\n    it('Should respond with a 200 status code', async () => {\r\n      const response = await request(app).post(\"/api/blogs\")\r\n        .send(blogData);\r\n       expect(response.body.statusCode).toBe(200)\r\n    })\r\n  })\r\n  //delete blog\r\n  describe(\"DELETE /api/blogs/:id\", () => {\r\n    it(\"should respond with a 200 status code\", async () => {\r\n      const response = await request(app).delete(\"/api/blogs/63e21c99208aa0b5bd58ff8f\")\r\n      expect(response.statusCode).toBe(207);\r\n    });\r\n  });\r\n\r\n\r\n\r\n  \r\n})\r\n\r\n//add all comments on blo\r\n\r\n //add comment\r\n \r\n  describe('get all users', () => {\r\n    const token =  process.env.TOKEN_SECRET\r\n\r\n    it('get all users', async () => {\r\n      const res = await request(app).get('/api/signin');\r\n      expect(res.status).toEqual(200);\r\n    });\r\n    \r\n    const userData = {\r\n      email: \"gahuza@gmail.com\",\r\n      password: \"gahuza\",\r\n    }\r\n    it('create  new user', async () => {\r\n      const res = await (await request(app).post('/api/signup'));\r\n      expect(res.status).toEqual(200);\r\n    });\r\n    it('delete user', async () => {\r\n      const res = await (await request(app).delete('/api/signIn/63de55283cbabcaf0123f51e'));\r\n      expect(res.status).toEqual(207);\r\n    });\r\n\r\n    describe(\"UPDATE /api/user/:id\", () => {\r\n      it('should respond with a 400 status code', async () => {\r\n        const response = await request(app).patch(\"/api/signIn/63e21c99208aa0b5bd58ff8f\")\r\n        .send(userData)\r\n        expect(response.statusCode).toBe(404)\r\n      })\r\n    })\r\n});\r\n\r\n    //get single blog\r\n\r\n   //add comment\r\n   describe('POST /blogs/:id/comments', () => {\r\n    it('return a 401 status if user is not logged in', async () => {\r\n      const res = await request(app).post('/api/blogs/comments/63e373de2ffaef80bcc03c95').send({});\r\n      expect(res.status).toEqual(401);\r\n    });\r\n  \r\n   \r\n  })\r\n  describe(\"GET /api/comment\", () => {\r\n    test('should respond with a 200 status code', async () => {\r\n      const response = await request(app).get(\"/api/comments/63e373de2ffaef80bcc03c95\")\r\n      expect(response.statusCode).toBe(404)\r\n    })\r\n  \r\n  })\r\n\r\n\r\n   //add or remove like\r\n   describe('POST /blogs/:id/likes', () => {\r\n    it('return a 500 status if user is not logged in', async () => {\r\n      const res = await request(app).post('/api/blogs/63e373de2ffaef80bcc03c95/likes').send({});\r\n      expect(res.status).toEqual(401);\r\n    });\r\n    describe(\"GET /api/likes\", () => {\r\n      test('should respond with a 404 status code', async () => {\r\n        const response = await request(app).get(\"/api/blogs/63e373de2ffaef80bcc03c95/likes\")\r\n        expect(response.statusCode).toBe(404)\r\n      })\r\n    \r\n    })\r\n\r\n    it(\"return a 400 status if blog doesn't exist\", async () => {\r\n      const user = {\r\n        email: 'gahuza@gmail.com',\r\n        password: 'gahuza',\r\n      };\r\n\r\n      const login = await request(app).post('/api/signin').send(user);\r\n      const token = login.body.token;\r\n      const allBlogs = await request(app).get('/api/blogs/63e373de2ffaef80bcc03c95/likes');\r\n      const currentBlog = allBlogs.body.data[0];\r\n      const id = currentBlog._id;\r\n      const updatedBlog = await request(app)\r\n        .post(`/api/blogs/${id + 1}/likes`)\r\n        .set('auth' + token);\r\n      expect(updatedBlog.status).toEqual(401);\r\n      const message = updatedBlog.body.message;\r\n      expect(message).toEqual(\"Blog doesn't exist!\");\r\n    });\r\n  \r\n  \r\n  })\r\n\r\n\r\n   \r\n         // add comment\r\n  \r\n  // get all comments\r\n  // describe('GET /blogs/:id/comments', () => {\r\n  //   it(\"return a 400 status if '_id' is invalid\", async () => {\r\n  //     const res = await request(app).get('/api/blogs/23333/comments');\r\n  //     expect(res.status).toEqual(400);\r\n  //     const message = res.body.message;\r\n  //     expect(message).toEqual(\"Blog doesn't exist\");\r\n  //   });\r\n  //   it('return one blog', async () => {\r\n  //     const allBlogs = await request(app).get('/api/blogs');\r\n  //     const currentBlog = allBlogs.body.data[0];\r\n  //     const id = currentBlog._id;\r\n  //     const res = await request(app).get(`/api/blogs/${id}/comments`);\r\n  //     expect(res.status).toEqual(200);\r\n  //   });\r\n  // });\r\n  "],"mappings":"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"}