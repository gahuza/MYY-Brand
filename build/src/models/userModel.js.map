{"version":3,"file":"userModel.js","names":["mongoose","bcryptjs","validator","userModel","Schema","firstName","type","String","required","lastName","email","unique","lowercase","isEmail","password","minlength","maxlength","role","default","enum","profileImage","pre","next","isModified","hash","methods","correctPassword","candidatePassword","userPassword","compare","User","model"],"sources":["../../../src/models/userModel.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport bcryptjs from 'bcryptjs';\r\nimport validator from 'validator';\r\n\r\n\r\n\r\nconst userModel = new mongoose.Schema({\r\n  firstName: {\r\n    type: String,\r\n    required: [true, 'firstName is required'],\r\n  },\r\n  lastName: {\r\n    type: String,\r\n    required: [true, 'lastName is required'],\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: [true, 'Email is required'],\r\n    unique: [true, 'Email in use choose another'],\r\n    lowercase: true,\r\n    validator: [validator.isEmail, 'Please input valid email'],\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: [true, 'Password is required'],\r\n    minlength: [6, 'Length should be 6'],\r\n    maxlength: [12, 'length should be lower than 12 characters'],\r\n  },\r\n  role: {\r\n    type: String,\r\n    default: 'local',\r\n    enum: ['admin', 'local'],\r\n  },\r\n \r\n  profileImage: {\r\n    type: String,\r\n    default:\r\n      'https://res.cloudinary.com/nrob/image/upload/v1613451239/npc5d5r9g0nyyihppqxd.png',\r\n  },\r\n  // location: {\r\n  //   type: String,\r\n  //   default: 'none',\r\n  // },\r\n  // phone: {\r\n  //   type: String,\r\n  //   default: 'none',\r\n  // },\r\n  // birthDate: {\r\n  //   type: String,\r\n  //   default: 'none',\r\n  // },\r\n \r\n\r\n  // desc: {\r\n  //   type: String,\r\n  //   default: 'none',\r\n  // },\r\n});\r\nuserModel.pre('save', async function (next) {\r\n  if (!this.isModified('password')) return next();\r\n  this.password = await bcryptjs.hash(this.password, 12);\r\n});\r\n\r\nuserModel.methods.correctPassword = async function (\r\n  candidatePassword,\r\n  userPassword\r\n) {\r\n  return await bcryptjs.compare(candidatePassword, userPassword);\r\n};\r\n\r\nconst User = mongoose.model('User', userModel);\r\n\r\nexport default User;\r\n\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,UAAU;AAC/B,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,SAAS,MAAM,WAAW;AAIjC,MAAMC,SAAS,GAAG,IAAIH,QAAQ,CAACI,MAAM,CAAC;EACpCC,SAAS,EAAE;IACTC,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,CAAC,IAAI,EAAE,uBAAuB;EAC1C,CAAC;EACDC,QAAQ,EAAE;IACRH,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,CAAC,IAAI,EAAE,sBAAsB;EACzC,CAAC;EACDE,KAAK,EAAE;IACLJ,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,CAAC,IAAI,EAAE,mBAAmB,CAAC;IACrCG,MAAM,EAAE,CAAC,IAAI,EAAE,6BAA6B,CAAC;IAC7CC,SAAS,EAAE,IAAI;IACfV,SAAS,EAAE,CAACA,SAAS,CAACW,OAAO,EAAE,0BAA0B;EAC3D,CAAC;EACDC,QAAQ,EAAE;IACRR,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,CAAC,IAAI,EAAE,sBAAsB,CAAC;IACxCO,SAAS,EAAE,CAAC,CAAC,EAAE,oBAAoB,CAAC;IACpCC,SAAS,EAAE,CAAC,EAAE,EAAE,2CAA2C;EAC7D,CAAC;EACDC,IAAI,EAAE;IACJX,IAAI,EAAEC,MAAM;IACZW,OAAO,EAAE,OAAO;IAChBC,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO;EACzB,CAAC;EAEDC,YAAY,EAAE;IACZd,IAAI,EAAEC,MAAM;IACZW,OAAO,EACL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AACFf,SAAS,CAACkB,GAAG,CAAC,MAAM,EAAE,gBAAgBC,IAAI,EAAE;EAC1C,IAAI,CAAC,IAAI,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE,OAAOD,IAAI,EAAE;EAC/C,IAAI,CAACR,QAAQ,GAAG,MAAMb,QAAQ,CAACuB,IAAI,CAAC,IAAI,CAACV,QAAQ,EAAE,EAAE,CAAC;AACxD,CAAC,CAAC;AAEFX,SAAS,CAACsB,OAAO,CAACC,eAAe,GAAG,gBAClCC,iBAAiB,EACjBC,YAAY,EACZ;EACA,OAAO,MAAM3B,QAAQ,CAAC4B,OAAO,CAACF,iBAAiB,EAAEC,YAAY,CAAC;AAChE,CAAC;AAED,MAAME,IAAI,GAAG9B,QAAQ,CAAC+B,KAAK,CAAC,MAAM,EAAE5B,SAAS,CAAC;AAE9C,eAAe2B,IAAI"}